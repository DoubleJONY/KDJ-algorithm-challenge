def solution(money):
    dp1 = [0] * len(money)
    dp1[0], dp1[1] = money[0],  max(money[0], money[1])

    for i in range(2, len(money)-1): 
        dp1[i] = max(dp1[i-1], money[i] + dp1[i-2])

    dp2 = [0] * len(money)
    dp2[0], dp2[1] = 0, money[1]
    
    for i in range(2, len(money)): 
        dp2[i] = max(dp2[i-1], money[i] + dp2[i-2])

    return max(max(dp1), max(dp2)) 


print(solution([1, 2, 3, 1]))


# 채점을 시작합니다.
# 정확성  테스트
# 테스트 1 〉	통과 (0.21ms, 10.3MB)
# 테스트 2 〉	통과 (0.55ms, 10.2MB)
# 테스트 3 〉	통과 (0.30ms, 10.3MB)
# 테스트 4 〉	통과 (0.03ms, 10.2MB)
# 테스트 5 〉	통과 (0.27ms, 10.3MB)
# 테스트 6 〉	통과 (0.35ms, 10.3MB)
# 테스트 7 〉	통과 (0.25ms, 10.3MB)
# 테스트 8 〉	통과 (0.17ms, 10.3MB)
# 테스트 9 〉	통과 (0.54ms, 10.3MB)
# 테스트 10 〉	통과 (0.12ms, 10.2MB)
# 효율성  테스트
# 테스트 1 〉	통과 (564.70ms, 92.4MB)
# 테스트 2 〉	통과 (530.94ms, 87.1MB)
# 테스트 3 〉	통과 (529.30ms, 90.1MB)
# 테스트 4 〉	통과 (554.14ms, 91.1MB)
# 테스트 5 〉	통과 (459.69ms, 77.1MB)
# 테스트 6 〉	통과 (511.05ms, 87.7MB)
# 테스트 7 〉	통과 (308.27ms, 55.3MB)
# 테스트 8 〉	통과 (307.81ms, 56.9MB)
# 테스트 9 〉	통과 (372.77ms, 64.9MB)
# 테스트 10 〉	통과 (506.66ms, 88.4MB)
# 채점 결과
# 정확성: 50.0
# 효율성: 50.0
# 합계: 100.0 / 100.0